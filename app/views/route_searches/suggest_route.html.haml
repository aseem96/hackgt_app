.col-md-4
  = form_tag suggest_route_route_searches_path, method: :post, remote: true, html: {:id=> "form", :class=>"form"} do |f|
    .form-group.row
      %label.col-md-2.form-control-label From
      .col-md-10
        =text_field_tag :from, nil, class: 'from form-control input'
    .form-group.row
      %label.col-md-2.form-control-label To
      .col-md-10
        =text_field_tag :to, nil, class: 'to form-control input'
    .form-group.row
      %label.col-md-2.form-control-label Travel Mode
      .col-md-10
        =text_field_tag :mode, nil, class: 'mode form-control input'
    .clearfix
      = submit_tag "Go", class: "btn go btn-primary right" , style: "float: right; width: 6em"
#map{style: "height: 100%"}
%script{:src => "https://maps.google.com/maps/api/js?key=#{ENV['GOOGLE_MAPS_JS_API_KEY']}&libraries=geometry", :type => "text/javascript"}
:javascript
  $(document).on("ready",function(e){
    var map;
    var directionsService;
    var polylines = [];
    var shadows = [];
    var data = [];
    var infowindow;
    var markers = [];
    function initialize_map(){
        map = new google.maps.Map(document.getElementById('map'), {
            center: {lat: 33.7757973, lng: -84.4015073},
            zoom: 12,
            mapTypeId: 'terrain'
        });

        directionsService = new google.maps.DirectionsService();
          // get the bounds of the polyline
          // http://stackoverflow.com/questions/3284808/getting-the-bounds-of-a-polyine-in-google-maps-api-v3
          google.maps.Polyline.prototype.getBounds = function(startBounds) {
              if(startBounds) {
                  var bounds = startBounds;
              }
              else {
                  var bounds = new google.maps.LatLngBounds();
              }
              this.getPath().forEach(function(item, index) {
                  bounds.extend(new google.maps.LatLng(item.lat(), item.lng()));
              });
              return bounds;
        };

        

        $(document).on('click','.go', function(){
          var from = $('.from').val();
          var to = $('.to').val(); 
          var mode = $('.mode').val();
          calcRoute(from, to, mode, map);
        });
      }

    function calcRoute(start, end, mode, map) {
      var request = {
          origin: start,
          destination: end,
          provideRouteAlternatives: true,
          unitSystem: google.maps.UnitSystem.METRIC,
          travelMode: google.maps.TravelMode[mode]
      };
      directionsService.route(request, function(response, status) {
          // clear former polylines
          for(var j in  polylines ) {
              polylines[j].setMap(null);
              shadows[j].setMap(null);
          }
          polylines = [];
          shadows = [];
          data = [];
          
          b = {}
          for(i in response.routes) {
              b[i] = response.routes[i].legs[0].steps
          }


          var route_index = 0
          console.log(b);
          if (status == google.maps.DirectionsStatus.OK) {
            $.ajax({
              url: "/route_searches/best_route.json",
              type: "PUT",
              data: JSON.stringify({'legs': b}),
              contentType: "application/json",
              success: function(route_values) {
                clearMarkers();
                console.log(route_values);
                route_index = route_values['final_route'];
                var locations = [];
                for(var j in route_values){
                  console.log("YOLO1");
                  for(var k in route_values[''+j]['aqi_index']){
                    console.log("YOLO2");
                    locations.push([route_values[''+j]['aqi_index'][k][1], route_values[''+j]['aqi_index'][k][2], route_values[''+j]['aqi_index'][k][0], route_values[''+j]['aqi_index'][k][3], route_values[''+j]['aqi_index'][k][4]]);
                  }
                }

                console.log(locations);
                
                for(var l in locations){
                  addMarker({lat: locations[l][0],lng: locations[l][1]}, locations[l][2], locations[l][3], locations[l][4],  map);
                }


                var bounds = new google.maps.LatLngBounds();
                for(var i in response.routes) {
                    // let's make the first suggestion highlighted;
                    var hide = (i==route_index ? false : true);
                    console.log(hide);
                    var shadow = drawPolylineShadow(response.routes[i].overview_path, '#666666');
                    var line = drawPolyline(response.routes[i].overview_path, '#0000ff', hide, map);
                    polylines.push(line);
                    shadows.push(shadow);
                    // let's add some data for the infoWindow
                    data.push({
                        distance: response.routes[i].legs[0].distance,
                        duration: response.routes[i].legs[0].duration,
                        end_address: response.routes[i].legs[0].end_address,
                        start_address: response.routes[i].legs[0].start_address,
                        end_location: response.routes[i].legs[0].end_location,
                        start_location: response.routes[i].legs[0].start_location
                    });
                    bounds = line.getBounds(bounds);

                    google.maps.event.addListener(shadow, 'click', function(e) {
                        // detect which route was clicked on
                        var index = shadows.indexOf(this);
                        highlightRoute(index, e, map);
                    });

                }
                map.fitBounds(bounds);
              
              }
            });

              
          }
      });
    }



    

    // Adds a marker to the map and push to the array.
    function addMarker(location, label, color, info, map) {
      var pinColor = color;
      var pinImage = new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_letter&chld=%E2%80%A2|" + pinColor,
          new google.maps.Size(21, 34),
          new google.maps.Point(0,0),
          new google.maps.Point(5, 34));
      var pinShadow = new google.maps.MarkerImage("http://chart.apis.google.com/chart?chst=d_map_pin_shadow",
          new google.maps.Size(40, 37),
          new google.maps.Point(0, 0),
          new google.maps.Point(12, 35));


      var marker = new google.maps.Marker({
        position: location,
        label: label,
        icon: pinImage,
        shadow: pinShadow,
        map: map
      });
      markers.push(marker);
    }

    // Sets the map on all markers in the array.
    function setMapOnAll(map) {
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(map);
      }
    }

    // Removes the markers from the map, but keeps them in the array.
    function clearMarkers() {
      setMapOnAll(null);
    }

    // Shows any markers currently in the array.
    function showMarkers() {
      setMapOnAll(map);
    }

    // Deletes all markers in the array by removing references to them.
    function deleteMarkers() {
      clearMarkers();
      markers = [];
    }





    
    function highlightRoute(index, e, map) {
        for(var j in  polylines ) {
            if(j==index) {
                //var color = '#0000ff';
                polylines[j].setMap(map);
                // feel free to customise this string
                var contentString =
                    '<span>'+ data[j].distance.text +'</span><br/>'+
                    '<span>'+ data[j].duration.text +'</span><br/>'+
                    '<span>route: '+ j +'</span><br/>'+
                    //'From: <span>'+ data[j].start_address +'</span><br/>'+
                    //'To: <span>'+ data[j].end_address +'</span><br/>'+
                    '';
                if(e) {
                   var position = new google.maps.LatLng(e.latLng.lat(), e.latLng.lng());
                    // it may be needed to close the previous infoWindow
                    if(infowindow) {
                        infowindow.close();
                        infowindow = null;
                    }
                    infowindow = new google.maps.InfoWindow({
                        content: contentString,
                        position: position,
                        map: map
                    });
                    //infowindow.open(map, polylines[j]);
                }
            }
            else {
                polylines[j].setMap(null);
            }
        }
    }
    // returns a polyline.
    // if hide is set to true, the line is not put on the map
    function drawPolyline(path, color, hide, map) {
        var line = new google.maps.Polyline({
            path: path,
            strokeColor: color,
            strokeOpacity: 0.9,
            strokeWeight: 3
        });
        if(! hide) {
            line.setMap(map);
        }
        return line;
    }
    function drawPolylineShadow(path, color, hide) {
        var line = new google.maps.Polyline({
            path: path,
            strokeColor: color,
            strokeOpacity: 0.4,
            strokeWeight: 7
        });
        if(! hide) {
            line.setMap(map);
        }
        return line;
    }
    google.maps.event.addDomListener(window, 'load', initialize_map);
  });

  

